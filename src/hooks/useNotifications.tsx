import { useMutation } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { NotificationType, NotificationRecipient, NotificationData } from '@/types/notifications';
import { useToast } from './use-toast';

export const useNotifications = () => {
  const { toast } = useToast();

  const sendNotification = useMutation({
    mutationFn: async ({
      type,
      recipients,
      data,
      silent = false
    }: {
      type: NotificationType;
      recipients: NotificationRecipient[];
      data: NotificationData;
      silent?: boolean;
    }) => {
      // Filtrar recipients v√°lidos
      const validRecipients = recipients.filter(r => r.email && r.name);
      
      if (validRecipients.length === 0) {
        if (!silent) {
          console.warn('Nenhum destinat√°rio v√°lido encontrado para notifica√ß√£o:', type);
        }
        return;
      }

      console.log(`üìß Enviando notifica√ß√£o ${type} para ${validRecipients.length} destinat√°rio(s)`);

      const { data: result, error } = await supabase.functions.invoke('send-notification', {
        body: {
          type,
          recipients: validRecipients,
          data
        }
      });

      if (error) {
        console.error('Erro ao enviar notifica√ß√£o:', error);
        throw new Error(`Erro ao enviar notifica√ß√£o: ${error.message}`);
      }

      if (!silent) {
        console.log(`‚úÖ Notifica√ß√£o ${type} enviada com sucesso`);
      }

      return result;
    },
    onError: (error: any) => {
      console.error('Erro na notifica√ß√£o:', error);
      // N√£o mostrar toast de erro para n√£o atrapalhar a UX principal
      // O usu√°rio n√£o precisa saber que o email falhou, o processo principal deve continuar
    }
  });

  return {
    sendNotification: sendNotification.mutateAsync,
    isSending: sendNotification.isPending
  };
};
